{"version":3,"file":"user_manager-885b011b.js","sources":["../../node_modules/@vicons/ionicons5/es/Pencil.js","../../node_modules/@vicons/material/es/PasswordRound.js","../../node_modules/@vicons/material/es/RefreshFilled.js","../../src/views/admin/components/EditUserForm.vue","../../src/views/admin/components/EditLimitForm.vue","../../src/views/admin/user_manager.vue"],"sourcesContent":["import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 512 512'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createElementVNode(\n  'path',\n  {\n    fill: 'none',\n    stroke: 'currentColor',\n    'stroke-linecap': 'round',\n    'stroke-linejoin': 'round',\n    'stroke-width': '44',\n    d: 'M358.62 129.28L86.49 402.08L70 442l39.92-16.49l272.8-272.13l-24.1-24.1z'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = /*#__PURE__*/ _createElementVNode(\n  'path',\n  {\n    d: 'M413.07 74.84l-11.79 11.78l24.1 24.1l11.79-11.79a16.51 16.51 0 0 0 0-23.34l-.75-.75a16.51 16.51 0 0 0-23.35 0z',\n    fill: 'none',\n    stroke: 'currentColor',\n    'stroke-linecap': 'round',\n    'stroke-linejoin': 'round',\n    'stroke-width': '44'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_4 = [_hoisted_2, _hoisted_3]\nexport default defineComponent({\n  name: 'Pencil',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createElementBlock('svg', _hoisted_1, _hoisted_4)\n  }\n})\n","import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 24 24'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createElementVNode(\n  'path',\n  {\n    d: 'M3 17h18c.55 0 1 .45 1 1s-.45 1-1 1H3c-.55 0-1-.45-1-1s.45-1 1-1zm-.5-4.43c.36.21.82.08 1.03-.28l.47-.82l.48.83c.21.36.67.48 1.03.28c.36-.21.48-.66.28-1.02l-.49-.84h.95c.41 0 .75-.34.75-.75s-.34-.75-.75-.75H5.3l.47-.82c.21-.36.09-.82-.27-1.03a.764.764 0 0 0-1.03.28L4 8.47l-.47-.82a.764.764 0 0 0-1.03-.28c-.36.21-.48.67-.27 1.03l.47.82h-.95c-.41 0-.75.34-.75.75s.34.75.75.75h.95l-.48.83c-.2.36-.08.82.28 1.02zm8 0c.36.21.82.08 1.03-.28l.47-.82l.48.83c.21.36.67.48 1.03.28c.36-.21.48-.66.28-1.02l-.48-.83h.95c.41 0 .75-.34.75-.75s-.34-.75-.75-.75h-.96l.47-.82a.76.76 0 0 0-.27-1.03a.746.746 0 0 0-1.02.27l-.48.82l-.47-.82a.742.742 0 0 0-1.02-.27c-.36.21-.48.67-.27 1.03l.47.82h-.96a.74.74 0 0 0-.75.74c0 .41.34.75.75.75h.95l-.48.83c-.2.36-.08.82.28 1.02zM23 9.97c0-.41-.34-.75-.75-.75h-.95l.47-.82a.76.76 0 0 0-.27-1.03a.746.746 0 0 0-1.02.27l-.48.83l-.47-.82a.742.742 0 0 0-1.02-.27c-.36.21-.48.67-.27 1.03l.47.82h-.95a.743.743 0 0 0-.76.74c0 .41.34.75.75.75h.95l-.48.83a.74.74 0 0 0 .28 1.02c.36.21.82.08 1.03-.28l.47-.82l.48.83c.21.36.67.48 1.03.28c.36-.21.48-.66.28-1.02l-.48-.83h.95c.4-.01.74-.35.74-.76z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = [_hoisted_2]\nexport default defineComponent({\n  name: 'PasswordRound',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createElementBlock('svg', _hoisted_1, _hoisted_3)\n  }\n})\n","import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 24 24'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createElementVNode(\n  'path',\n  {\n    d: 'M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = [_hoisted_2]\nexport default defineComponent({\n  name: 'RefreshFilled',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createElementBlock('svg', _hoisted_1, _hoisted_3)\n  }\n})\n","<template>\r\n  <!-- user register form -->\r\n  <n-form :model=\"props.user\" :rules=\"rules\" ref=\"formRef\" :label-col=\"{ span: 8 }\" :wrapper-col=\"{ span: 16 }\">\r\n    <n-form-item :label=\"t('commons.username')\" path=\"username\">\r\n      <n-input v-model:value=\"username\" placeholder=\"\" />\r\n    </n-form-item>\r\n    <n-form-item :label=\"t('commons.nickname')\" path=\"nickname\">\r\n      <n-input v-model:value=\"nickname\" placeholder=\"\" />\r\n    </n-form-item>\r\n    <n-form-item :label=\"t('commons.password')\" path=\"password\">\r\n      <n-input v-model:value=\"password\" placeholder=\"\" />\r\n    </n-form-item>\r\n    <n-form-item :label=\"t('commons.email')\" path=\"email\">\r\n      <n-input v-model:value=\"email\" placeholder=\"\" />\r\n    </n-form-item>\r\n  </n-form>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, reactive, computed } from 'vue';\r\nimport { UserCreate } from '@/types/schema';\r\nimport { i18n } from '@/i18n';\r\nconst t = i18n.global.t as any;\r\n\r\nconst props = defineProps<{\r\n  user: UserCreate;\r\n}>()\r\n\r\nconst emits = defineEmits(['update:user']);\r\n\r\nconst rules = {\r\n  username: { required: true, message: t('tips.pleaseEnterUsername'), trigger: 'blur' },\r\n  password: { required: true, message: t('tips.pleaseEnterPassword'), trigger: 'blur' },\r\n  email: { required: true, message: t('tips.pleaseEnterEmail'), trigger: 'blur' },\r\n  nickname: { required: true, message: t('tips.pleaseEnterNickname'), trigger: 'blur' },\r\n}\r\n\r\nconst username = computed({\r\n  get: () => props.user.username,\r\n  set: (value) => {\r\n    props.user.username = value;\r\n    emits('update:user', { ...props.user, username: value })\r\n  }\r\n})\r\n\r\nconst password = computed({\r\n  get: () => props.user.password,\r\n  set: (value) => {\r\n    props.user.password = value;\r\n    emits('update:user', { ...props.user, password: value })\r\n  }\r\n})\r\n\r\nconst email = computed({\r\n  get: () => props.user.email,\r\n  set: (value) => {\r\n    props.user.email = value;\r\n    emits('update:user', { ...props.user, email: value })\r\n  }\r\n})\r\n\r\nconst nickname = computed({\r\n  get: () => props.user.nickname,\r\n  set: (value) => {\r\n    props.user.nickname = value;\r\n    emits('update:user', { ...props.user, nickname: value })\r\n  }\r\n})\r\n\r\n</script>","<template>\r\n  <n-form label-placement=\"left\" label-width=\"auto\" :style=\"{\r\n    maxWidth: '640px'\r\n  }\">\r\n    <n-form-item v-model=\"props.limit\" :label=\"t('commons.canUsePaidModel')\" path=\"can_use_paid\">\r\n      <n-switch v-model:value=\"can_use_paid\" placeholder=\"\" />\r\n    </n-form-item>\r\n    <n-form-item v-model=\"props.limit\" :label=\"t('commons.canUseGPT4Model')\" path=\"can_use_paid\">\r\n      <n-switch v-model:value=\"can_use_gpt4\" placeholder=\"\" />\r\n    </n-form-item>\r\n    <n-form-item v-model=\"props.limit\" :label=\"t('commons.maxConversationCount')\" path=\"max_conv_count\">\r\n      <n-input-number v-model:value=\"max_conv_count\" :parse=\"parseValue\" :format=\"formatValue\" />\r\n    </n-form-item>\r\n    <n-form-item v-model=\"props.limit\" :label=\"t('commons.availableAskCount')\" path=\"available_ask_count\">\r\n      <n-input-number v-model:value=\"available_ask_count\" :parse=\"parseValue\" :format=\"formatValue\" />\r\n    </n-form-item>\r\n    <n-form-item v-model=\"props.limit\" :label=\"t('commons.availableGPT4AskCount')\" path=\"available_gpt4_ask_count\">\r\n      <n-input-number v-model:value=\"available_gpt4_ask_count\" :parse=\"parseValue\" :format=\"formatValue\" />\r\n    </n-form-item>\r\n  </n-form>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { LimitSchema } from '@/types/schema';\r\nimport { i18n } from '@/i18n';\r\n\r\nconst t = i18n.global.t as any;\r\n\r\nconst props = defineProps<{\r\n  limit: LimitSchema;\r\n}>();\r\n\r\nconst emits = defineEmits(['update:limit']);\r\n\r\nconst formatValue = (value: number | null) => value == -1 ? t('commons.unlimited') : value\r\nconst parseValue = (value: string) => value == t('commons.unlimited') ? -1 : parseInt(value)\r\n\r\nconst can_use_paid = computed({\r\n  get: () => props.limit.can_use_paid,\r\n  set: (value) => {\r\n    props.limit.can_use_paid = value;\r\n    emits('update:limit', { ...props.limit, can_use_paid: value });\r\n  },\r\n});\r\n\r\nconst can_use_gpt4 = computed({\r\n  get: () => props.limit.can_use_gpt4,\r\n  set: (value) => {\r\n    props.limit.can_use_gpt4 = value;\r\n    emits('update:limit', { ...props.limit, can_use_gpt4: value });\r\n  },\r\n});\r\n\r\nconst max_conv_count = computed({\r\n  get: () => props.limit.max_conv_count,\r\n  set: (value) => {\r\n    props.limit.max_conv_count = value;\r\n    emits('update:limit', { ...props.limit, max_conv_count: value });\r\n  },\r\n});\r\n\r\nconst available_ask_count = computed({\r\n  get: () => props.limit.available_ask_count,\r\n  set: (value) => {\r\n    props.limit.available_ask_count = value;\r\n    emits('update:limit', { ...props.limit, available_ask_count: value });\r\n  },\r\n});\r\n\r\nconst available_gpt4_ask_count = computed({\r\n  get: () => props.limit.available_gpt4_ask_count,\r\n  set: (value) => {\r\n    props.limit.available_gpt4_ask_count = value;\r\n    emits('update:limit', { ...props.limit, available_gpt4_ask_count: value });\r\n  },\r\n});\r\n</script>","<template>\r\n  <div class=\"mb-4 flex flex-row space-x-2\">\r\n    <n-button type=\"primary\" @click=\"handleAddUser\"> {{ $t(\"commons.addUser\") }} </n-button>\r\n    <n-button text @click=\"refreshData\"> \r\n      <template #icon>\r\n        <n-icon>\r\n          <RefreshFilled />\r\n        </n-icon>\r\n      </template>\r\n    </n-button>\r\n  </div>\r\n\r\n  <n-data-table :scroll-x=\"1400\" size=\"small\" :columns=\"columns\" :data=\"data\" :bordered=\"true\" :pagination=\"{\r\n    pageSize: 20\r\n  }\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, reactive, computed, h } from 'vue';\r\nimport { useUserStore } from '@/store';\r\nimport { DataTableColumns, NButton, NIcon } from 'naive-ui'\r\nimport { LimitSchema, UserCreate, UserRead, chatStatusMap } from '@/types/schema';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { getAllUserApi, registerApi, deleteUserApi, resetUserPasswordApi, updateUserLimitApi } from '@/api/user';\r\nimport { Dialog, Message } from '@/utils/tips';\r\nimport { TrashOutline, Pencil } from '@vicons/ionicons5';\r\nimport { PasswordRound, RefreshFilled } from '@vicons/material';\r\nimport EditUserForm from './components/EditUserForm.vue';\r\nimport EditLimitForm from './components/EditLimitForm.vue';\r\nimport { getCountTrans, popupResetUserPasswordDialog } from '@/utils/renders';\r\n\r\nconst { t } = useI18n();\r\n\r\nconst userStore = useUserStore();\r\n\r\nconst data = ref<Array<UserRead>>([]);\r\n\r\nconst refreshData = () => {\r\n  getAllUserApi().then(res => {\r\n    data.value = res.data;\r\n    Message.success(t(\"tips.refreshed\"));\r\n  })\r\n}\r\n\r\ngetAllUserApi().then(res => {\r\n  data.value = res.data;\r\n})\r\n\r\nconst columns: DataTableColumns<UserRead> = [\r\n  {\r\n    title: \"#\",\r\n    key: 'id'\r\n  },\r\n  {\r\n    title: t(\"commons.username\"),\r\n    key: 'username'\r\n  },\r\n  {\r\n    title: t(\"commons.nickname\"),\r\n    key: 'nickname'\r\n  },\r\n  {\r\n    title: t('commons.status'),\r\n    key: 'chat_status',\r\n    render(row) {\r\n      return row.chat_status ? t(chatStatusMap[row.chat_status as keyof typeof chatStatusMap]) : ''\r\n    },\r\n    sorter: 'default'\r\n  },\r\n  {\r\n    title: t(\"commons.activeTime\"),\r\n    key: 'active_time',\r\n    render(row) {\r\n      return row.active_time ? new Date(row.active_time + 'Z').toLocaleString() : t(\"commons.neverActive\")\r\n    },\r\n    sorter: (a, b) => {\r\n      if (!a.active_time || !b.active_time) return 0;\r\n      return new Date(a.active_time!).getTime() - new Date(b.active_time!).getTime()\r\n    },\r\n  },\r\n  {\r\n    title: t(\"commons.maxConversationCount\"),\r\n    key: 'max_conv_count',\r\n    render(row) {\r\n      return getCountTrans(row.max_conv_count!);\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.availableAskCount\"),\r\n    key: 'available_ask_count',\r\n    render(row) {\r\n      return getCountTrans(row.available_ask_count!);\r\n    },\r\n  },\r\n  {\r\n    title: t(\"commons.availableGPT4AskCount\"),\r\n    key: 'available_gpt4_ask_count',\r\n    render(row) {\r\n      return getCountTrans(row.available_gpt4_ask_count!);\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.canUsePaidModel\"),\r\n    key: 'can_use_paid',\r\n    render(row) {\r\n      return row.can_use_paid ? t(\"commons.yes\") : t(\"commons.no\")\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.canUseGPT4Model\"),\r\n    key: 'can_use_gpt4',\r\n    render(row) {\r\n      return row.can_use_gpt4 ? t(\"commons.yes\") : t(\"commons.no\")\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.email\"),\r\n    key: 'email'\r\n  },\r\n  {\r\n    title: t(\"commons.isSuperuser\"),\r\n    key: 'is_superuser',\r\n    render(row) {\r\n      return row.is_superuser ? t(\"commons.yes\") : t(\"commons.no\")\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.actions\"),\r\n    key: 'actions',\r\n    fixed: 'right',\r\n    render(row) {\r\n      // TODO: 删除、修改密码，两个按钮\r\n      return h(\"div\", {\r\n        class: \"flex justify-start space-x-2\"\r\n      }, [\r\n        h(NButton, {\r\n          size: \"small\",\r\n          type: \"error\",\r\n          circle: true,\r\n          secondary: true,\r\n          onClick: () => {\r\n            const d = Dialog.warning({\r\n              title: t(\"commons.deleteUser\"),\r\n              content: t(\"tips.deleteUserConfirm\"),\r\n              positiveText: t(\"commons.confirm\"),\r\n              negativeText: t(\"commons.cancel\"),\r\n              onPositiveClick: () => {\r\n                d.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                  deleteUserApi(row.id).then(res => {\r\n                    Message.success(t(\"tips.deleteUserSuccess\"));\r\n                    getAllUserApi().then(res => {\r\n                      data.value = res.data;\r\n                    })\r\n                    resolve(true);\r\n                  }).catch(err => {\r\n                    Message.error(t(\"tips.deleteUserFailed\") + \": \" + err);\r\n                    reject(err);\r\n                  }).finally(() => {\r\n                    d.loading = false;\r\n                  })\r\n                })\r\n              }\r\n            })\r\n          }\r\n        }, {\r\n          icon: () => h(NIcon, null, {\r\n            default: () => h(TrashOutline)\r\n          })\r\n        }),\r\n        h(NButton, {\r\n          size: \"small\",\r\n          type: \"info\",\r\n          circle: true,\r\n          secondary: true,\r\n          onClick: () => {\r\n            popupResetUserPasswordDialog(\r\n              async (password: string) => {\r\n                await resetUserPasswordApi(row.id, password);\r\n              },\r\n              () => { Message.info(t(\"tips.resetUserPasswordSuccess\")) },\r\n              () => { Message.error(t(\"tips.resetUserPasswordFailed\")) }\r\n            )\r\n          }\r\n        }, {\r\n          icon: () => h(NIcon, null, {\r\n            default: () => h(PasswordRound)\r\n          })\r\n        }),\r\n        h(NButton, {\r\n          size: \"small\",\r\n          type: \"primary\",\r\n          circle: true,\r\n          secondary: true,\r\n          onClick: handleSetUserLimit(row)\r\n        }, {\r\n          icon: () => h(NIcon, null, {\r\n            default: () => h(Pencil)\r\n          })\r\n        })\r\n\r\n      ])\r\n    }\r\n  }\r\n]\r\n\r\nconst handleAddUser = () => {\r\n  const user = ref<UserCreate>({\r\n    username: '',\r\n    nickname: '',\r\n    email: '',\r\n    password: '',\r\n    is_superuser: false\r\n  })\r\n  const d = Dialog.info({\r\n    title: t(\"commons.addUser\"),\r\n    content: () => h(EditUserForm, {\r\n      user: user.value,\r\n      'onUpdate:user': (newUser: UserCreate) => {\r\n        user.value = newUser;\r\n      }\r\n    }, { default: () => \"\" }),\r\n    positiveText: t(\"commons.confirm\"),\r\n    negativeText: t(\"commons.cancel\"),\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      return new Promise((resolve, reject) => {\r\n        registerApi(user.value).then(res => {\r\n          Message.success(t(\"commons.addUserSuccess\"));\r\n          getAllUserApi().then(res => {\r\n            data.value = res.data;\r\n          })\r\n          resolve(true);\r\n        }).catch(err => {\r\n          Message.error(t(\"commons.addUserFailed\") + \": \" + err);\r\n          reject(err);\r\n        }).finally(() => {\r\n          d.loading = false;\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nconst handleSetUserLimit = (user: UserRead) => () => {\r\n  const limit = ref<LimitSchema>({\r\n    max_conv_count: user.max_conv_count,\r\n    available_ask_count: user.available_ask_count,\r\n    can_use_paid: user.can_use_paid,\r\n    can_use_gpt4: user.can_use_gpt4,\r\n    available_gpt4_ask_count: user.available_gpt4_ask_count\r\n  })\r\n  const d = Dialog.info({\r\n    title: t(\"commons.setUserLimit\"),\r\n    content: () => h(EditLimitForm, {\r\n      limit: limit.value,\r\n      'onUpdate:limit': (newLimit: LimitSchema) => {\r\n        limit.value = newLimit;\r\n      }\r\n    }, { default: () => \"\" }),\r\n    positiveText: t(\"commons.confirm\"),\r\n    negativeText: t(\"commons.cancel\"),\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      return new Promise((resolve, reject) => {\r\n        updateUserLimitApi(user.id, limit.value).then(res => {\r\n          Message.success(t(\"commons.setUserLimitSuccess\"));\r\n          getAllUserApi().then(res => {\r\n            data.value = res.data;\r\n          })\r\n          resolve(true);\r\n        }).catch(err => {\r\n          reject(err);\r\n        }).finally(() => {\r\n          d.loading = false;\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n</script>\r\n"],"names":["_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","Pencil","defineComponent","_ctx","_cache","_openBlock","_createElementBlock","PasswordRound","RefreshFilled","t","i18n","rules","username","computed","props","value","emits","password","email","nickname","formatValue","parseValue","can_use_paid","can_use_gpt4","max_conv_count","available_ask_count","available_gpt4_ask_count","useI18n","useUserStore","data","ref","refreshData","getAllUserApi","res","Message","columns","row","chatStatusMap","b","getCountTrans","h","NButton","d","Dialog","resolve","reject","deleteUserApi","res2","err","NIcon","TrashOutline","popupResetUserPasswordDialog","resetUserPasswordApi","handleSetUserLimit","handleAddUser","user","EditUserForm","newUser","registerApi","limit","EditLimitForm","newLimit","updateUserLimitApi"],"mappings":"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","x_google_ignoreList":[0,1,2]}