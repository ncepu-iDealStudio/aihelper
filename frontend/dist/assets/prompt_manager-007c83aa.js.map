{"version":3,"file":"prompt_manager-007c83aa.js","sources":["../../src/views/admin/prompt_manager.vue"],"sourcesContent":["<template>  \r\n  <n-grid :x-gap=\"12\" :cols=\"4\">\r\n    <n-grid-item :offset=\"0\">\r\n      <div style=\"max-width: 200px;\">\r\n        <n-space vertical>\r\n          <n-select v-model:value=\"seletedPromptInfo.promptParentSelectValue\" :options=\"promptParentList\"\r\n            max-length=\"200px\" placeholder=\"选择prompt分类：\" @update:value=\"showPromptChildList()\"\r\n            :loading=\"loadings.promptParentListLoading\" />\r\n        </n-space>\r\n      </div>\r\n    </n-grid-item>\r\n    <n-grid-item :offset=\"2\" style=\"justify-self: end\">\r\n      <n-button type=\"primary\" @click=\"addChildPrompt()\">添加</n-button>\r\n    </n-grid-item>\r\n  </n-grid>\r\n\r\n  <n-data-table :scroll-x=\"800\" size=\"small\" :columns=\"promptChildTable\" :data=\"promptChildList\" :bordered=\"true\"\r\n  placeholder=\"请选择分类：\"\r\n    :pagination=\"{\r\n      pageSize: 10\r\n    }\" :loading=\"loadings.promptChildListLoading\" style=\"margin-top: 20px;\" />\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { Dialog, Message } from \"@/utils/tips\";\r\nimport { Pencil, TrashOutline } from \"@vicons/ionicons5\";\r\nimport { CascaderOption, DataTableColumns, NButton, NIcon, NInput, NSelect } from \"naive-ui\";\r\nimport { ref, h, reactive, onMounted } from \"vue\";\r\n\r\nimport { updateUserLimitApi, deleteChildPromptApi, resetChildPromptApi, getParentPromptApi } from \"@/api/prompt\"\r\n\r\n// 加载动画\r\nconst loadings = reactive({\r\n  promptParentListLoading: false,\r\n  promptChildListLoading: false\r\n})\r\n// 选择器 值 = parent prompt id\r\nconst seletedPromptInfo = reactive({\r\n  promptParentSelectValue: '',\r\n  promptParentSelectLabel: '',\r\n})\r\n\r\n// 储存的 prompt parent list 的值  (接口的返回 data)\r\nconst PromptListData = ref()\r\n// 选择器的 prompt parent 的选择数据\r\nconst promptParentList = ref<Array<any>>([]);\r\n\r\n// 储存的 prompt child list 的值  (接口的返回 data)\r\nconst PromptChildListData = ref()\r\n// 表格 内容\r\nconst promptChildList = ref<Array<any>>([]);\r\n\r\n\r\n// 数据转换 接口返回值 -> 选择器选项\r\nconst setPromptParentSelect = () => {\r\n  const options: CascaderOption[] = []\r\n  for (let i = 0; i < PromptListData.value.data.length; i++) {\r\n    options.push({\r\n      value: PromptListData.value.data[i].prompt_id,\r\n      label: PromptListData.value.data[i].category,\r\n    })\r\n  }\r\n  return options\r\n}\r\n\r\n// set prompt parent 选择器选项\r\nconst setPrompts: any = async () => {\r\n  const parms = {\r\n    prompt_parent_id: seletedPromptInfo.promptParentSelectValue ? seletedPromptInfo.promptParentSelectValue : 0,\r\n  }\r\n  seletedPromptInfo.promptParentSelectValue = \"请选择分类：\"\r\n  loadings.promptParentListLoading = true\r\n  PromptListData.value = await getParentPromptApi(parms)\r\n  loadings.promptParentListLoading = false\r\n  promptParentList.value = setPromptParentSelect()\r\n  seletedPromptInfo.promptParentSelectValue = promptParentList.value[0].value\r\n  showPromptChildList()\r\n  // console.log(PromptListData.value.data)\r\n}\r\n\r\n// 数据转换 接口返回值 -> 表格内容\r\nconst setChildPromptTable = () => {\r\n  const options: CascaderOption[] = []\r\n  for (let i = 0; i < PromptChildListData.value.data.length; i++) {\r\n    options.push({\r\n      id: PromptChildListData.value.data[i].prompt_id,\r\n      title: PromptChildListData.value.data[i].title,\r\n      describe: PromptChildListData.value.data[i].prompt,\r\n    })\r\n  }\r\n  seletedPromptInfo.promptParentSelectLabel = PromptChildListData.value.data[0].category\r\n  return options\r\n}\r\n\r\n// 选择 parent prompt 后 显示 child list\r\nconst showPromptChildList = async () => {\r\n  // console.log('parent_id', seletedPromptInfo.promptParentSelectValue)\r\n  // console.log('parent_分类', seletedPromptInfo.promptParentSelectLabel)\r\n\r\n  const parms = {\r\n    prompt_parent_id: seletedPromptInfo.promptParentSelectValue,\r\n  }\r\n  loadings.promptChildListLoading = true\r\n  PromptChildListData.value = await getParentPromptApi(parms)\r\n  loadings.promptChildListLoading = false\r\n  // console.log(PromptChildListData.value.data)\r\n  promptChildList.value = setChildPromptTable()\r\n}\r\n\r\n// 添加 prompt\r\nconst addChildPrompt = () => {\r\n  const parms = {\r\n    prompt_parent_id: 0,\r\n    category: null,\r\n    title: '',\r\n    prompt: ''\r\n  }\r\n  const d = Dialog.success({\r\n    title: \"添加 prompt\",\r\n    content: () =>\r\n      [\r\n        \"选择分类\",\r\n        h(\r\n          NSelect,\r\n          {\r\n            options: promptParentList.value,\r\n            onUpdateValue: (value: any, label: any) => {\r\n              parms.prompt_parent_id = value\r\n              parms.category = label.label\r\n            },\r\n            loading: loadings.promptParentListLoading,\r\n            placeholder: \"选择添加的prompt 分类\",\r\n            style: \"margin-bottom:10px\",\r\n          },\r\n          { default: () => \"\" },\r\n        ),\r\n        \"添加标题\",\r\n        h(\r\n          NInput,\r\n          {\r\n            onInput: (e) => (parms.title = e),\r\n            placeholder: \"输入标题\",\r\n            style: \"margin-bottom:10px\",\r\n          },\r\n          { default: () => \"\" },\r\n        ),\r\n        \"添加描述\",\r\n        h(\r\n          NInput,\r\n          {\r\n            onInput: (e) => (parms.prompt = e),\r\n            placeholder: \"输入描述\",\r\n            style: \"margin-bottom:10px\",\r\n            type: \"textarea\"\r\n          },\r\n          { default: () => \"\" },\r\n        ),\r\n\r\n      ],\r\n    positiveText: \"确认\",\r\n    negativeText: \"取消\",\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      return new Promise((resolve, reject) => {\r\n        // console.log(parms)\r\n        updateUserLimitApi(parms)\r\n          .then((res) => {\r\n            Message.success('添加成功!');\r\n            showPromptChildList()\r\n            resolve(true);\r\n          })\r\n          .catch((err) => {\r\n            Message.error(\r\n              \"修改失败\" + \": \" + err\r\n            );\r\n            reject(err);\r\n          })\r\n          .finally(() => {\r\n            d.loading = false;\r\n          });\r\n      });\r\n    },\r\n  });\r\n}\r\n\r\n// 表格 标题 元素\r\nconst promptChildTable: DataTableColumns<any> = [\r\n  // {\r\n  //   title: \"ID\",\r\n  //   key: \"id\",\r\n  // },\r\n  {\r\n    title: '标题',\r\n    key: \"title\",\r\n  },\r\n  {\r\n    title: '描述',\r\n    key: \"describe\",\r\n  },\r\n  {\r\n    title: \"操作\",\r\n    key: \"actions\",\r\n    fixed: \"right\",\r\n    render(row) {\r\n      return h(\r\n        \"div\",\r\n        {\r\n          class: \"flex justify-start space-x-2\",\r\n        },\r\n        [\r\n          h(\r\n            NButton,\r\n            {\r\n              size: \"small\",\r\n              type: \"error\",\r\n              circle: true,\r\n              secondary: true,\r\n              onClick: () => {\r\n                const d = Dialog.error({\r\n                  title: \"删除 prompt\",\r\n                  content: \"确认删除:  \" + row.title + '？',\r\n                  negativeText: \"取消\",\r\n                  positiveText: \"确认\",\r\n                  onPositiveClick: () => {\r\n                    d.loading = true;\r\n                    return new Promise((resolve, reject) => {\r\n                      deleteChildPromptApi(row.id)\r\n                        .then((res) => {\r\n                          Message.success(\"删除成功\");\r\n                          showPromptChildList()\r\n                          resolve(true);\r\n                        })\r\n                        .catch((err) => {\r\n                          Message.error(\r\n                            \"删除失败\" + \": \" + err\r\n                          );\r\n                          reject(err);\r\n                        })\r\n                        .finally(() => {\r\n                          d.loading = false;\r\n                        });\r\n                    });\r\n                  },\r\n                });\r\n              },\r\n            },\r\n            {\r\n              icon: () =>\r\n                h(NIcon, null, {\r\n                  default: () => h(TrashOutline),\r\n                }),\r\n            }\r\n          ),\r\n          h(\r\n            NButton,\r\n            {\r\n              size: \"small\",\r\n              type: \"primary\",\r\n              circle: true,\r\n              secondary: true,\r\n              onClick: () => {\r\n                const updatePromptForm = reactive({\r\n                  title: row.title,\r\n                  describe: row.describe\r\n                })\r\n\r\n                const d = Dialog.success({\r\n                  title: \"修改 prompt\",\r\n                  content: () =>\r\n                    [\r\n                      \"prompt 标题：\",\r\n                      h(\r\n                        NInput,\r\n                        {\r\n                          defaultValue: updatePromptForm.title,\r\n                          onInput: (e) => (updatePromptForm.title = e),\r\n                          placeholder: \"输入标题\",\r\n                          style: \"margin-bottom:10px\"\r\n                        },\r\n                        { default: () => \"\" },\r\n                      ),\r\n\r\n                      \"prompt 描述：\",\r\n                      h(\r\n                        NInput,\r\n                        {\r\n                          defaultValue: updatePromptForm.describe,\r\n                          onInput: (e) => (updatePromptForm.describe = e),\r\n                          placeholder: \"输入描述\",\r\n                          style: \"margin-bottom:10px\",\r\n                          type: \"textarea\"\r\n                        },\r\n                        { default: () => \"\" },\r\n                      ),\r\n                    ],\r\n                  positiveText: \"确认\",\r\n                  negativeText: \"取消\",\r\n                  onPositiveClick: () => {\r\n                    d.loading = true;\r\n                    return new Promise((resolve, reject) => {\r\n                      const parms = {\r\n                        prompt_parent_id: seletedPromptInfo.promptParentSelectValue,\r\n                        category: seletedPromptInfo.promptParentSelectLabel,\r\n                        title: updatePromptForm.title,\r\n                        prompt: updatePromptForm.describe\r\n                      }\r\n                      // console.log(parms)\r\n                      resetChildPromptApi(row.id, JSON.stringify(parms))\r\n                        .then((res) => {\r\n                          Message.success('修改成功!');\r\n                          showPromptChildList()\r\n                          resolve(true);\r\n                        })\r\n                        .catch((err) => {\r\n                          Message.error(\r\n                            \"修改失败\" + \": \" + err\r\n                          );\r\n                          reject(err);\r\n                        })\r\n                        .finally(() => {\r\n                          d.loading = false;\r\n                        });\r\n                    });\r\n                  },\r\n                });\r\n              },\r\n            },\r\n            {\r\n              icon: () =>\r\n                h(NIcon, null, {\r\n                  default: () => h(Pencil),\r\n                }),\r\n            }\r\n          ),\r\n        ]\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\n\r\n\r\n// 预加载\r\nonMounted(() => {\r\n  // getParentPrompt()\r\n  setPrompts()\r\n});\r\n\r\n</script>\r\n<style></style>"],"names":["loadings","reactive","seletedPromptInfo","PromptListData","ref","promptParentList","PromptChildListData","promptChildList","setPromptParentSelect","options","i","setPrompts","parms","getParentPromptApi","showPromptChildList","setChildPromptTable","addChildPrompt","d","Dialog","h","NSelect","value","label","NInput","e","resolve","reject","updateUserLimitApi","res","Message","err","promptChildTable","row","NButton","deleteChildPromptApi","NIcon","TrashOutline","updatePromptForm","resetChildPromptApi","Pencil","onMounted"],"mappings":"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"}