{"version":3,"file":"conversation_manager-20f54920.js","sources":["../../node_modules/@vicons/material/es/EmojiFlagsFilled.js","../../node_modules/@vicons/material/es/PersonAddAlt1Filled.js","../../src/views/admin/components/UserSelector.vue","../../src/views/admin/conversation_manager.vue"],"sourcesContent":["import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 24 24'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createElementVNode(\n  'path',\n  {\n    d: 'M14 9l-1-2H7V5.72c.6-.34 1-.98 1-1.72c0-1.1-.9-2-2-2s-2 .9-2 2c0 .74.4 1.38 1 1.72V21h2v-4h5l1 2h7V9h-6zm4 8h-4l-1-2H7V9h5l1 2h5v6z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = [_hoisted_2]\nexport default defineComponent({\n  name: 'EmojiFlagsFilled',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createElementBlock('svg', _hoisted_1, _hoisted_3)\n  }\n})\n","import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, defineComponent } from 'vue'\nconst _hoisted_1 = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n  viewBox: '0 0 24 24'\n}\nconst _hoisted_2 = /*#__PURE__*/ _createElementVNode(\n  'path',\n  {\n    d: 'M13 8c0-2.21-1.79-4-4-4S5 5.79 5 8s1.79 4 4 4s4-1.79 4-4zm2 2v2h3v3h2v-3h3v-2h-3V7h-2v3h-3zM1 18v2h16v-2c0-2.66-5.33-4-8-4s-8 1.34-8 4z',\n    fill: 'currentColor'\n  },\n  null,\n  -1\n  /* HOISTED */\n)\nconst _hoisted_3 = [_hoisted_2]\nexport default defineComponent({\n  name: 'PersonAddAlt1Filled',\n  render: function render(_ctx, _cache) {\n    return _openBlock(), _createElementBlock('svg', _hoisted_1, _hoisted_3)\n  }\n})\n","<template>\r\n  <n-auto-complete :get-show=\"getShow\" v-model:value=\"value\" :options=\"options\" :placeholder=\"t('commons.chooseUser')\"\r\n    @update:value=\"update\"></n-auto-complete>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, ref, watch } from 'vue';\r\nimport { UserRead } from '@/types/schema';\r\nimport { getAllUserApi } from '@/api/user';\r\nimport { i18n } from '@/i18n';\r\nconst t = i18n.global.t as any;\r\n\r\nconst data = ref<Array<UserRead>>([]);\r\nconst value = ref<string | null>(null);\r\n\r\nconst emits = defineEmits(['update:value']);\r\n\r\nconst getShow = (_option: any) => true;\r\n\r\nconst update = (value: string | null) => {\r\n  emits('update:value', value);\r\n}\r\n\r\ngetAllUserApi().then(res => {\r\n  data.value = res.data;\r\n})\r\n\r\nconst options = computed(() => {\r\n  return data.value.map(item => {\r\n    return {\r\n      label: item.username,\r\n      value: item.username\r\n    }\r\n  })\r\n})\r\n</script>","<template>\r\n  <div class=\"mb-4 mt-1 flex flex-row justify-between\">\r\n    <n-button @click=\"handleVanishAllInvalidConversations\"> {{ $t(\"commons.deleteInvalidConversations\") }} </n-button>\r\n    <div class=\"space-x-2\" v-show=\"checkedRowKeys.length !== 0\">\r\n      <n-button type=\"warning\" secondary @click=\"handleInvalidateConversations\">\r\n        <template #icon>\r\n          <n-icon>\r\n            <EmojiFlagsFilled />\r\n          </n-icon>\r\n        </template>\r\n        {{ $t(\"commons.invalidateConversation\") }}\r\n      </n-button>\r\n      <n-button type=\"error\" secondary @click=\"handleVanishConversations\">\r\n        <template #icon>\r\n          <n-icon>\r\n            <TrashOutline />\r\n          </n-icon>\r\n        </template>\r\n        {{ $t(\"commons.vanishConversation\") }}\r\n      </n-button>\r\n      <n-button type=\"info\" secondary @click=\"handleAssignConversations\">\r\n        <template #icon>\r\n          <n-icon>\r\n            <PersonAddAlt1Filled />\r\n          </n-icon>\r\n        </template>\r\n        {{ $t(\"commons.chooseUserToAssign\") }}\r\n      </n-button>\r\n    </div>\r\n  </div>\r\n  <n-data-table size=\"small\" :columns=\"columns\" :data=\"data\" :bordered=\"true\" :pagination=\"{\r\n    pageSize: 20\r\n  }\" :row-key=\"rowKey\" v-model:checked-row-keys=\"checkedRowKeys\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, h } from 'vue';\r\nimport type { DataTableColumns } from 'naive-ui'\r\nimport { NButton, NIcon, NTooltip } from 'naive-ui';\r\nimport { ConversationSchema } from '@/types/schema';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { Dialog, Message } from '@/utils/tips';\r\nimport { TrashOutline } from '@vicons/ionicons5';\r\nimport { EmojiFlagsFilled, PersonAddAlt1Filled } from '@vicons/material';\r\nimport UserSelector from './components/UserSelector.vue';\r\nimport { assignConversationToUserApi, deleteConversationApi, getAllConversationsApi, vanishConversationApi } from '@/api/chat';\r\nimport { getModelNameTrans, modelNameMap } from '@/utils/renders';\r\n\r\nconst { t } = useI18n();\r\n\r\nconst data = ref<Array<ConversationSchema>>([]);\r\nconst rowKey = (row: ConversationSchema) => row.conversation_id;\r\nconst checkedRowKeys = ref<Array<string>>([]);\r\n\r\ngetAllConversationsApi(true).then(res => {\r\n  data.value = res.data;\r\n})\r\n\r\nconst columns: DataTableColumns<ConversationSchema> = [\r\n  {\r\n    type: 'selection',\r\n  },\r\n  {\r\n    title: \"#\",\r\n    key: 'id',\r\n    sorter: 'default'\r\n  },\r\n  {\r\n    title: \"UUID\",\r\n    key: 'conversation_id',\r\n    render: (row) => {\r\n      return h(NTooltip, { trigger: \"hover\" }, {\r\n        trigger: () => row.conversation_id?.substring(0, 4),\r\n        default: () => row.conversation_id\r\n      })\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.title\"),\r\n    key: 'title',\r\n    sorter: 'default',\r\n    // render: (row) => {\r\n    //   return \r\n    render: (row) => {\r\n      return h(NButton, {\r\n        text: true,\r\n        tag: 'a',\r\n        href: `/conv/${row.conversation_id}`,\r\n        target: '_blank'\r\n      }, {\r\n        default: () => row.title ? row.title : t(\"commons.empty\")\r\n    // }\r\n      })\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.belongToUser\"),\r\n    key: 'user_id',\r\n    render: (row) => {\r\n      return row.user_id ? row.user_id : t(\"commons.empty\")\r\n    },\r\n    sorter: 'default'\r\n  },\r\n  {\r\n    title: t(\"commons.createTime\"),\r\n    key: 'create_time',\r\n    defaultSortOrder: 'descend',\r\n    sorter: (a, b) => {\r\n      if (!a.create_time || !b.create_time) return 0;\r\n      return new Date(a.create_time!).getTime() - new Date(b.create_time!).getTime()\r\n    },\r\n    render: (row) => {\r\n      if (!row.create_time) return '';\r\n      return h(NTooltip, { trigger: \"hover\" }, {\r\n        trigger: () => new Date(row.create_time! + 'Z').toLocaleString(),\r\n        default: () => row.create_time\r\n      })\r\n    }\r\n  },\r\n  {\r\n    title: t(\"commons.modelName\"),\r\n    key: 'model_name',\r\n    render(row) {\r\n      return row.model_name ? getModelNameTrans(row.model_name) : t(\"commons.unknown\")\r\n    },\r\n    sorter: 'default'\r\n  },\r\n  {\r\n    title: t(\"commons.isValid\"),\r\n    key: 'is_valid',\r\n    render(row) {\r\n      return row.is_valid ? t(\"commons.yes\") : t(\"commons.no\")\r\n    },\r\n    sorter: (a, b) => {\r\n      const val_a = a.is_valid ? 1 : 0;\r\n      const val_b = b.is_valid ? 1 : 0;\r\n      return val_a - val_b;\r\n    }\r\n  },\r\n]\r\n\r\nconst handleInvalidateConversations = () => {\r\n  const d = Dialog.info({\r\n    title: t(\"commons.invalidateConversation\"),\r\n    content: t(\"tips.invalidateConversation\"),\r\n    positiveText: t(\"commons.confirm\"),\r\n    negativeText: t(\"commons.cancel\"),\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      return new Promise((resolve, reject) => {\r\n        const action = async () => {\r\n          for (const conversation_id of checkedRowKeys.value) {\r\n            await deleteConversationApi(conversation_id)\r\n          }\r\n        }\r\n        action().then(() => {\r\n          Message.success(t(\"tips.deleteConversationSuccess\"))\r\n          getAllConversationsApi(true).then(res => {\r\n            data.value = res.data;\r\n          })\r\n          resolve(true)\r\n        }).catch((err) => {\r\n          Message.error(t(\"tips.deleteConversationFailed\") + \": \" + err)\r\n          reject(err)\r\n        }).finally(() => {\r\n          d.loading = false;\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nconst handleVanishConversations = () => {\r\n  const d = Dialog.warning({\r\n    title: t(\"commons.vanishConversation\"),\r\n    content: t(\"tips.vanishConversation\"),\r\n    positiveText: t(\"commons.confirm\"),\r\n    negativeText: t(\"commons.cancel\"),\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      return new Promise((resolve, reject) => {\r\n        const action = async () => {\r\n          for (const conversation_id of checkedRowKeys.value) {\r\n            await vanishConversationApi(conversation_id)\r\n          }\r\n        }\r\n        action().then(() => {\r\n          Message.success(t(\"tips.success\"))\r\n          getAllConversationsApi(true).then(res => {\r\n            data.value = res.data;\r\n          })\r\n          checkedRowKeys.value = [];\r\n          resolve(true)\r\n        }).catch((err) => {\r\n          Message.error(t(\"tips.failed\") + \": \" + err)\r\n          reject(err)\r\n        }).finally(() => {\r\n          d.loading = false;\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nconst handleAssignConversations = () => {\r\n  let username: string | null = null;\r\n  const d = Dialog.warning({\r\n    title: t(\"commons.chooseUserToAssign\"),\r\n    content: () => h(UserSelector, {\r\n      'onUpdate:value': (val: string | null) => {\r\n        username = val;\r\n      }\r\n    }),\r\n    positiveText: t(\"commons.confirm\"),\r\n    negativeText: t(\"commons.cancel\"),\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      return new Promise((resolve, reject) => {\r\n        if (username === null) {\r\n          Message.error(t(\"errors.noUserSelected\"));\r\n          d.loading = false;\r\n          reject(false);\r\n          return;\r\n        }\r\n        const action = async () => {\r\n          for (const conversation_id of checkedRowKeys.value) {\r\n            await assignConversationToUserApi(conversation_id, username!)\r\n          }\r\n        }\r\n        action().then(() => {\r\n          Message.success(t(\"tips.success\"))\r\n          getAllConversationsApi(true).then(res => {\r\n            data.value = res.data;\r\n          })\r\n          checkedRowKeys.value = [];\r\n          resolve(true)\r\n        }).catch((err) => {\r\n          Message.error(t(\"tips.failed\") + \": \" + err)\r\n          reject(err)\r\n        }).finally(() => {\r\n          d.loading = false;\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nconst handleVanishAllInvalidConversations = () => {\r\n  const d = Dialog.info({\r\n    title: t(\"commons.deleteInvalidConversations\"),\r\n    content: t(\"commons.deleteInvalidConversationsConfirm\"),\r\n    positiveText: t(\"commons.confirm\"),\r\n    negativeText: t(\"commons.cancel\"),\r\n    onPositiveClick: () => {\r\n      d.loading = true;\r\n      const action = async () => {\r\n        for (const conversation of data.value) {\r\n          if (!conversation.is_valid) {\r\n            await vanishConversationApi(conversation.conversation_id!)\r\n          }\r\n        }\r\n        data.value = data.value.filter(conversation => conversation.is_valid)\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        action().then(() => {\r\n          Message.success(t(\"tips.deleteConversationSuccess\"))\r\n          checkedRowKeys.value = [];\r\n          resolve(true)\r\n        }).catch((err) => {\r\n          Message.error(t(\"tips.deleteConversationFailed\"))\r\n          reject()\r\n        }).finally(() => {\r\n          d.loading = false;\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n</script>\r\n"],"names":["_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","EmojiFlagsFilled","defineComponent","_ctx","_cache","_openBlock","_createElementBlock","PersonAddAlt1Filled","t","i18n","data","ref","value","getShow","_option","update","value2","emits","getAllUserApi","res","options","computed","item","useI18n","rowKey","row","checkedRowKeys","getAllConversationsApi","columns","h","NTooltip","_a","NButton","a","b","getModelNameTrans","val_a","val_b","handleInvalidateConversations","d","Dialog","resolve","reject","conversation_id","deleteConversationApi","Message","err","handleVanishConversations","vanishConversationApi","handleAssignConversations","username","UserSelector","val","assignConversationToUserApi","handleVanishAllInvalidConversations","action","conversation"],"mappings":"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","x_google_ignoreList":[0,1]}